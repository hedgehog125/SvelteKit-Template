import{S as y,i as T,s as v,k as d,q as h,a as D,l as w,m as g,r,h as l,c as P,n as j,b as A,J as a,C as k}from"../../../chunks/paths-e7eaaeb4.js";import{l as B}from"../../../chunks/Tools-094787a4.js";function L(x){let t,e,c,m,f,u,s,p;return{c(){t=d("main"),e=d("p"),c=h(`That link wasn't very exciting. But the fact that it adapts to the base URL on build is somewhat interesting. That was by setting the anchor's href using the function "linkPage" from "$util/Tools.js". In that example, "linkDemo" was what was parsed to the function, which results in "/linkDemo" if there's no base URL, or "/`),m=h(_),f=h('/linkDemo" if there is. And the one below just uses an empty string.'),u=D(),s=d("a"),p=h("Back"),this.h()},l(i){t=w(i,"MAIN",{});var n=g(t);e=w(n,"P",{});var o=g(e);c=r(o,`That link wasn't very exciting. But the fact that it adapts to the base URL on build is somewhat interesting. That was by setting the anchor's href using the function "linkPage" from "$util/Tools.js". In that example, "linkDemo" was what was parsed to the function, which results in "/linkDemo" if there's no base URL, or "/`),m=r(o,_),f=r(o,'/linkDemo" if there is. And the one below just uses an empty string.'),o.forEach(l),u=P(n),s=w(n,"A",{href:!0});var b=g(s);p=r(b,"Back"),b.forEach(l),n.forEach(l),this.h()},h(){j(s,"href",B(""))},m(i,n){A(i,t,n),a(t,e),a(e,c),a(e,m),a(e,f),a(t,u),a(t,s),a(s,p)},p:k,i:k,o:k,d(i){i&&l(t)}}}const _="<base>";class E extends y{constructor(t){super(),T(this,t,null,L,v,{})}}export{E as default};
